MOVE_TYPE =
  STAY: 1
  HIT: 2
  SPLIT: 3
  BUST: 4
  QUIT: 5

GAME_STATE =
  NEW_GAME: 1
  ROUND_START: 2
  DEFENDER_MOVING: 3
  ATTACKER_MOVING: 4
  ROUND_END: 5
  GAME_OVER: 6

class Game

  constructor: ->
    @table = new Table()
    @players = [
      new Player(),
      new Player()
    ]
    @thisPlayer = 0 #self awareness of whether this is player 1 or 2
    @lastMoveId = 0 #no moves listed yet

    @currentRound = null

    @state = GAME_STATE.NEW_GAME

    @moves = [] #array of moves as they were made in DESC order
    #@queuedMoves = [] #moves to be animated

    @dealNextHand()

  getSaveData: ->
    return {
      table: @table.getSaveData()
      state: @state
      currentRound: @currentRound.getSaveData()
      players: [
        @players[0].getSaveData()
        @players[1].getSaveData()
      ]
    }

  loadData: (data) ->
    @table.loadData data.table
    @state = data.state
    @currentRound.loadData data.currentRound
    for player, i in @players
      player.loadData data.players[i]

    if @state is GAME_STATE.ATTACKER_MOVING
      attackerHand = @table.playerHands[@currentRound.playerTurn]
      attackerHand.reveal()

  dealNextHand: ->
    if @state is GAME_STATE.GAME_OVER
      return

    @state = GAME_STATE.ROUND_START

    if @currentRound?
      @clearHand()
      startingPlayer = @currentRound.playerTurn #aka, 2nd player of last round
    else
      startingPlayer = 0

    defenderHand = @table.playerHands[startingPlayer]
    attackerHand = @table.playerHands[Number(!startingPlayer)]
    attackerHand.isRevealingAll = no

    defenderHand.push @table.unusedPile.takeNextCard()
    attackerHand.push @table.unusedPile.takeNextCard()

    defenderHand.push @table.unusedPile.takeNextCard()
    attackerHand.push @table.unusedPile.takeNextCard()

    @currentRound = new BattleRound startingPlayer

    @state = GAME_STATE.DEFENDER_MOVING

  makeMove: (move) ->
    if @state is GAME_STATE.GAME_OVER
      return

    @moves.push new Move(@currentRound.playerTurn, move)
    @currentRound.makeMove move

    switch move
      when MOVE_TYPE.HIT
        card = @table.unusedPile.takeNextCard()
        playerHand = @table.playerHands[@currentRound.playerTurn]
        playerHand.push card
        if playerHand.value() > 21
          @makeMove MOVE_TYPE.BUST

      #when MOVE_TYPE.SPLIT
      #  card1 = @table.unusedPile.takeNextCard()
      #  card2 = @table.unusedPile.takeNextCard()

      when MOVE_TYPE.STAY, MOVE_TYPE.BUST
        if @currentRound.isOver
          console.log 'Battle Round Is Over'
          @evaluateResult()
          @dealNextHand()
        else
          @state = GAME_STATE.ATTACKER_MOVING
          attackerHand = @table.playerHands[@currentRound.playerTurn]
          attackerHand.reveal()

      else
        null

    console.log 'moves so far', @moves


  evaluateResult: ->
    #Get the players and their hand values
    player1 = @players[0]
    player1HandValue = @table.playerHands[0].value()
    if player1HandValue > 21
      player1HandValue = 0

    player2 = @players[1]
    player2HandValue = @table.playerHands[1].value()
    if player2HandValue > 21
      player2HandValue = 0

    #Check if there was a winner and dock HP appropriately
    if player1HandValue > player2HandValue
      hpLost = player1HandValue - player2HandValue
      if hpLost > 11
        hpLost = 11
      player2.takeDamage hpLost

    else if player2HandValue > player1HandValue
      hpLost = player2HandValue - player1HandValue
      if hpLost > 11
        hpLost = 11
      player1.takeDamage hpLost

    else
      console.log 'tie round, no damage'

    if player1.hp is 0 or player2.hp is 0
      @state = GAME_STATE.GAME_OVER

  clearHand: ->
    for hand in @table.playerHands
      cards = hand.takeAllCards()
      for card in cards
        @table.usedPile.push card